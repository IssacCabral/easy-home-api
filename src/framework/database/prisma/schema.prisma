// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Amenities {
  id    String @id
  label String @unique @db.VarChar(40)

  properties Properties[]
}

model Landlords {
  id            String  @id
  name          String  @db.VarChar(50)
  phone         String  @db.VarChar(20)
  email         String  @unique @db.VarChar(50)
  password      String  @db.VarChar(100)
  urlProfilePic String? @db.VarChar(200)

  properties Properties[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tenants {
  id            String   @id
  name          String   @db.VarChar(50)
  phone         String   @db.VarChar(20)
  email         String   @unique @db.VarChar(50)
  password      String   @db.VarChar(100)
  urlProfilePic String?  @db.VarChar(200)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  property        TenantsOnProperties?
  ContactRequest  ContactRequests[]
  PropertyReviews PropertyReviews[]
}

enum PropertyTypes {
  HOUSE
  APARTMENT
  DUPLEX
}

enum PropertyStatus {
  FREE
  BUSY
  SPLIT
}

enum ContactRequestStatus {
  IN_CONTACT
  RENTED
  FINISHED
}

model Properties {
  id          String         @id
  title       String         @db.VarChar(100)
  type        PropertyTypes
  status      PropertyStatus
  price       Float          @db.DoublePrecision
  bedrooms    Int            @db.SmallInt
  bathrooms   Int            @db.SmallInt
  depth       Float          @db.DoublePrecision
  width       Float          @db.DoublePrecision
  photosUrl   String         @db.VarChar(200)
  description String         @db.VarChar(200)

  amenities       Amenities[]
  tenants         TenantsOnProperties[]
  ContactRequest  ContactRequests[]
  PropertyReviews PropertyReviews[]

  Landlord   Landlords @relation(fields: [landlordId], references: [id])
  landlordId String

  address   Addresses @relation(fields: [addressId], references: [id])
  addressId String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TenantsOnProperties {
  property   Properties @relation(fields: [propertyId], references: [id])
  propertyId String
  tenant     Tenants    @relation(fields: [tenantId], references: [id])
  tenantId   String     @unique

  isMainTenant Boolean @default(false)

  @@id([propertyId, tenantId])
}

model Addresses {
  id            String @id
  addressNumber Int    @db.SmallInt
  street        String @db.VarChar(100)
  lat           Float
  lon           Float

  location Unsupported("geography(Point, 4326)")

  property Properties?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ContactRequests {
  id                 String               @id
  tenantId           String
  propertyId         String
  tenant             Tenants              @relation(fields: [tenantId], references: [id])
  property           Properties           @relation(fields: [propertyId], references: [id])
  status             ContactRequestStatus
  finalizationReason String?
  requestDate        DateTime             @default(now())
}

model PropertyReviews {
  id         String     @id
  tenantId   String
  propertyId String
  tenant     Tenants    @relation(fields: [tenantId], references: [id])
  property   Properties @relation(fields: [propertyId], references: [id])
  rating     Int
  comment    String
}
